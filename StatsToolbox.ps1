##########################################################################
# Stats Toolbox
#
# Description : show available counters on a vSphere server
# Author : Luc Dekens
# History :
# 1.0  : initial release - no distribution
# 1.1  : presented at VMworld 2014 US
# 1.1a : fixed issue when connected to ESXi
#########################################################################

function GenerateForm {

  ########################################################################
  # Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.8.0
  # Generated On: 8/18/2014 7:10 PM
  # Generated By: Luc
  ########################################################################

#region Helper Functions
  function Get-PerfCounter {
    [cmdletbinding()]
    param(
      [Parameter(Mandatory=$True,ValueFromPipeline=$True)]
      [VMware.Vim.PerfCounterInfo[]]$Counters,
      [string]$Interval
    )

    Begin{
      Write-Verbose "Get-PerfCounter - Entry"
      Write-Verbose "Get-PerfCounter - Interval = $Interval"
    }

    Process {
      $Counters | %{
        New-Object PSObject -Property @{
                Interval = $Interval
                Key = $_.Key
                Group = $_.GroupInfo.Key
                Name = $_.NameInfo.Key
                Rollup = $_.RollupType
                Level = $_.Level
                DevLevel = $_.PerDeviceLevel
                Counter = "$($_.GroupInfo.Key).$($_.NameInfo.Key).$($_.RollupType)"
                Description = $_.NameInfo.Summary
            }
      }
    }

    End{
      Write-Verbose "Get-PerfCounter - Exit"
    }
  }

  function Get-IntervalCounters{
    Write-Verbose "Get-IntervalCounters - Entry"

    if($RTRadio.Checked){$interval = @("RT")}
    elseif($HI1Radio.Checked){
      $interval = 1..($script:perfMgr.HistoricalInterval |
      where {$_.Key -eq 1} | Select -ExpandProperty Level)
    }
    elseif($HI2Radio.Checked){
      $interval = 1..($script:perfMgr.HistoricalInterval |
      where {$_.Key -eq 2} | Select -ExpandProperty Level)
    }
    elseif($HI3Radio.Checked){
      $interval = 1..($script:perfMgr.HistoricalInterval |
      where {$_.Key -eq 3} | Select -ExpandProperty Level)
    }
    elseif($HI4Radio.Checked){
      $interval = 1..($script:perfMgr.HistoricalInterval |
      where {$_.Key -eq 4} | Select -ExpandProperty Level)
    }

    $script:SelectedCounters = $script:Counters | where {$interval -contains $_.Interval} |
    Sort-Object -Property Counter -Unique
    Write-Verbose "Get-IntervalCounters - Interval - $interval"
    Write-Verbose "Get-IntervalCounters - Counters Count - $($script:Counters.Count)"
    $script:Counters | Group-Object -Property Interval | %{
      Write-Verbose "Get-IntervalCounters - Interval groups - $($_.Name) - $($_.Count)"
    }
    Write-Verbose "Get-IntervalCounters - After Interval filter - $($script:SelectedCounters.Count)"
    Write-Verbose "Get-IntervalCounters - CounterGroup Selected - $($CounterGroup.SelectedItem)"
    Write-Verbose "Get-IntervalCounters - CounterGroup Count - $($CounterGroup.Items.Count)"

    if($CounterGroup.SelectedItem -ne "<All>"){
      $script:SelectedCounters = $script:SelectedCounters | where {$_.Group -eq $CounterGroup.SelectedItem}
    }

    $script:SelectedUpToDate = $true
    Write-Verbose "Get-IntervalCounters - After Group filter - $($script:SelectedCounters.Count)"
  }

  function Update-CountersList {
    Write-Verbose "Update-CountersList - Entry"
    Write-Verbose "Update-CountersList - SelectedGroupUpToDate - $($script:SelectedGroupUpToDate)"
    Write-Verbose "Update-CountersList - LevelUpToDate - $($script:LevelInfoUpToDate)"
    $CountersList.BeginUpdate()
    $CountersList.Items.Clear()

    if(!$script:SelectedUpToDate){
      Get-IntervalCounters
    }
    $script:SelectedCounters | %{
      $item = New-Object System.Windows.Forms.ListViewItem($_.Counter)
      $item.ToolTipText = $_.Description
      if($_.Interval -ne "RT"){
        $item.SubItems.Add($_.Level)
        $item.SubItems.Add($_.DevLevel)
      }
      $CountersList.Items.Add($item)
    }
    $CountersInfo.Text = $script:SelectedCounters.Count
    $script:SelectedUpToDate = $true
    $CountersList.EndUpdate()
    if(!$script:SelectedGroupUpToDate){
      Update-CounterGroups
    }
    if(!$script:LevelInfoUpToDate){
      Update-StatLevelInfo
    }
  }

  function Update-CounterGroups{
    Write-Verbose "Update-CounterGroups - Entry"
    Write-Verbose "Update-CounterGroups - SelectedUpToDate - $($script:SelectedUpToDate)"
    Write-Verbose "Update-CounterGroups - SelectedGroupUpToDate - $($script:SelectedGroupUpToDate)"
    Write-Verbose "Update-CounterGroups - LevelUpToDate - $($script:LevelInfoUpToDate)"
    Write-Verbose "Update-CounterGroups - Script Index - $($script:GroupSelectedIndex)"
    Write-Verbose "Update-CounterGroups - Selected Index - $($CounterGroup.SelectedIndex)"
    Write-Verbose "Update-CounterGroups - Script Item - $($script:GroupSelected)"
    Write-Verbose "Update-CounterGroups - Selected Item via index - $($CounterGroup.Items[$CounterGroup.SelectedIndex])"
    Write-Verbose "Update-CounterGroups - Selected Item - $($CounterGroup.SelectedItem)"

    $script:GroupSelected = $CounterGroup.SelectedItem
    $script:GroupSelectedIndex = $CounterGroup.SelectedIndex

    $CounterGroup.BeginUpdate()
    $CounterGroup.Items.Clear()

    if(!$script:SelectedUpToDate){
      Get-IntervalCounters
    }

    $list = $script:Counters | Group-Object -Property Group | Select -ExpandProperty Name
    $list += "<All>"
    $list = $list | Sort-Object
    $CounterGroup.Items.AddRange($list)

    if($list -contains $script:GroupSelected){
      $CounterGroup.SelectedItem = $script:GroupSelected
    }
    else{
      $CounterGroup.SelectedIndex = 0
    }
    $script:GroupSelected = $CounterGroup.SelectedItem
    $script:GroupSelectedIndex = $CounterGroup.SelectedIndex
    $script:SelectedGroupUpToDate = $true
    $CounterGroup.EndUpdate()
  }

  function Update-StatLevelInfo{
    Write-Verbose "Update-StatLevelInfo - Entry"
    Write-Verbose "Update-CountersList - LevelUpToDate - $($script:LevelInfoUpToDate)"

    if($RTRadio.Checked){
      $StatLevelInfo.Text = "Statistics Level - na"
    }
    Elseif($HI1Radio.Checked){
      $lvl = $script:perfMgr.HistoricalInterval |
      where {$_.Key -eq 1} | Select -ExpandProperty Level
      $StatLevelInfo.Text = "Statistics Level $lvl"
    }
    Elseif($HI2Radio.Checked){
      $lvl = $script:perfMgr.HistoricalInterval |
      where {$_.Key -eq 2} | Select -ExpandProperty Level
      $StatLevelInfo.Text = "Statistics Level $lvl"
    }
    Elseif($HI3Radio.Checked){
      $lvl = $script:perfMgr.HistoricalInterval |
      where {$_.Key -eq 3} | Select -ExpandProperty Level
      $StatLevelInfo.Text = "Statistics Level $lvl"
    }
    Elseif($HI4Radio.Checked){
      $lvl = $script:perfMgr.HistoricalInterval |
      where {$_.Key -eq 4} | Select -ExpandProperty Level
      $StatLevelInfo.Text = "Statistics Level $lvl"
    }
    $script:LevelInfoUpToDate = $true
  }

  function Update-EntitiesList{
    Write-Verbose "Update-EntitiesList - Entry"
    Write-Verbose "Update-EntitiesList - EntitiesList Count - $($script:EntitiesSelected.Count)"
    Write-Verbose "Update-EntitiesList - EntitiesUpToDate - $($script:EntitiesSelectedUpToDate)"

    $types = "ClusterComputeResource","Datastore","HostSystem","ResourcePool","VirtualMachine"

    $EntitiesList.BeginUpdate()
    $EntitiesList.Items.Clear()

    if(!$script:EntitiesSelectedUpToDate){
      $script:EntitiesSelected = @()
      $script:EntitiesSelected += &{
        $types | %{
          Write-Verbose "Update-EntitiesList - Type - $($_)"
          Get-View -ViewType $_ -Property Name | %{
            New-Object PSObject -Property @{
                        Name = $_.Name
                        Type = $_.GetType().Name
                        MoRef = $_.MoRef
                    }
          }
        }
        $script:EntitiesSelectedUpToDate = $true
      }
    }
    $script:EntitiesSelected | Where {$_.Name -match $EntitySearch.Text} | %{
      $item = New-Object System.Windows.Forms.ListViewItem($_.Name)
      $item.SubItems.Add($_.Type)
      $EntitiesList.Items.Add($item)
    }

    $EntitiesList.EndUpdate()
  }

  function Update-Counters{
    Write-Verbose "Update-Counters - Entry"
    $script:Counters = $script:perfMgr.PerfCounter | Get-PerfCounter -Interval "RT"
    Write-Verbose "Update-Counters - After Realtime - Counters = $($script:Counters.Count)"
    if($global:DefaultVIServer.ProductLine -ne "embeddedEsx"){
      1..4 | %{
        $script:Counters += $script:perfMgr.QueryPerfCounterByLevel($_) | Get-PerfCounter -Interval $_
        Write-Verbose "Update-Counters - After Interval $_ - Counters = $($script:Counters.Count)"
      }
    }
  }

  function Sort-ListViewColumn{
    <#
    .SYNOPSIS
        Sort the ListView's item using the specified column.

    .DESCRIPTION
        Sort the ListView's item using the specified column.
        This function uses Add-Type to define a class that sort the items.
        The ListView's Tag property is used to keep track of the sorting.

    .PARAMETER ListView
        The ListView control to sort.

    .PARAMETER ColumnIndex
        The index of the column to use for sorting.

    .PARAMETER  SortOrder
        The direction to sort the items. If not specified or set to None, it will toggle.

    .EXAMPLE
        Sort-ListViewColumn -ListView $listview1 -ColumnIndex 0
#>
    param(
      [ValidateNotNull()]
      [Parameter(Mandatory=$true)]
      [System.Windows.Forms.ListView]$ListView,
      [Parameter(Mandatory=$true)]
      [int]$ColumnIndex,
    [System.Windows.Forms.SortOrder]$SortOrder = 'None')

    if(($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
    {
      return;
    }

    #region Define ListViewItemComparer
    try{
      $local:type = [ListViewItemComparer]
    }
    catch{
      Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @"
    using System;
    using System.Windows.Forms;
    using System.Collections;
    public class ListViewItemComparer : IComparer
    {
        public int column;
        public SortOrder sortOrder;
        public ListViewItemComparer()
        {
            column = 0;
            sortOrder = SortOrder.Ascending;
        }
        public ListViewItemComparer(int column, SortOrder sort)
        {
            this.column = column;
            sortOrder = sort;
        }
        public int Compare(object x, object y)
        {
            if(column >= ((ListViewItem)x).ListView.Columns.Count ||
                column >= ((ListViewItem)x).SubItems.Count ||
                column >= ((ListViewItem)y).SubItems.Count)
                column = 0;

            if(sortOrder == SortOrder.Ascending)
                return String.Compare(((ListViewItem)x).SubItems[column].Text,`

 ((ListViewItem)y).SubItems[column].Text);
            else
                return String.Compare(((ListViewItem)y).SubItems[column].Text,`

 ((ListViewItem)x).SubItems[column].Text);
        }
    }
"@  | Out-Null
    }
    #endregion

    if($ListView.Tag -is [ListViewItemComparer])
    {
      #Toggle the Sort Order
      if($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
      {
        if($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
        {
          $ListView.Tag.sortOrder = 'Descending'
        }
        else
        {
          $ListView.Tag.sortOrder = 'Ascending'
        }
      }
      else
      {
        $ListView.Tag.sortOrder = $SortOrder
      }

      $ListView.Tag.column = $ColumnIndex
      $ListView.Sort()#Sort the items
    }
    else
    {
      if($Sort -eq [System.Windows.Forms.SortOrder]::None)
      {
        $Sort = [System.Windows.Forms.SortOrder]::Ascending
      }

      #Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
      $ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
      $ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
    }
  }

  function Update-Intervals{
    if($global:DefaultVIServer.ProductLine -ne "embeddedEsx"){
      $HI1Radio.Enabled = $true
      $HI2Radio.Enabled = $true
      $HI3Radio.Enabled = $true
      $HI4Radio.Enabled = $true
    }
    else{
      $RTRadio.Checked = $true
      $HI1Radio.Enabled = $false
      $HI2Radio.Enabled = $false
      $HI3Radio.Enabled = $false
      $HI4Radio.Enabled = $false
    }
  }
#endregion Helper Functions

#region Import the Assemblies
  [reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
  [reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
#endregion Import the Assemblies

#region Event Script Blocks
  #----------------------------------------------
  #Generated Event Script Blocks
  #----------------------------------------------
  $FormInit = {
    $vSphereServer.Items.Clear()
    if($script:vServers){
      $vSphereServer.Items.AddRange($script:vServers)
    }

    if($global:DefaultVIServer){
      if($script:vServers -notcontains $global:DefaultVIServer.Name) {
        $script:vServers += $global:DefaultVIServer.Name
      }
      $vSphereServer.Text = $global:DefaultVIServer.Name

      $script:counterTab = [ordered]@{}
      $vsphereinfo.Text = $global:DefaultVIServer.ExtensionData.Content.About.FullName
      $si = Get-View ServiceInstance -Server $global:DefaultVIServer
      $script:perfMgr = Get-View $si.Content.PerfManager -Server $global:DefaultVIServer

      Update-Counters
      Update-Intervals
      $script:SelectedUpToDate = $false
      $script:SelectedGroupUpToDate = $false
      $script:LevelInfoUpToDate = $false
      $script:EntitiesSelectedUpToDate = $false
      Write-Verbose "FormInit - Before - GroupSelectedIndex - $($script:groupselectedindex)"
      $script:GroupSelectedIndex = $CounterGroup.SelectedIndex
      Write-Verbose "FormInit - After - GroupSelectedIndex - $($script:groupselectedindex)"
      $script:GroupSelected = $CounterGroup.SelectedItem
      Update-CountersList
    }
    else{
      $vsphereinfo.Text = "<No vSphere Server connected>"
    }
  }

  $OldestButton_Click = {
    Write-Verbose "OldestButton_Click - $(Get-Date) - Entry"
    Write-Verbose "OldestButton_Click - Selected Items - $($EntitiesList.SelectedItems.Count)"

    if($EntitiesList.SelectedItems.Count -eq 0){}
    else{
      $all = @()
      foreach($item in $EntitiesList.SelectedItems){
        $entry = $script:EntitiesSelected | where {$_.Name -eq $item.Text}
        $spec = New-Object VMware.Vim.PerfQuerySpec
        $spec.Entity = $entry.MoRef
        $all += $spec
      }
      Write-Verbose "OldestButton_Click - $all - $($all.Count)"
      $script:perfMgr.QueryPerf($all) |
      Select @{N="Entity";E={Get-View -Id $_.Entity -Property Name | Select -ExpandProperty Name}},
      @{N="Oldest";E={$_.SampleInfo[0].Timestamp}} |
      Out-GridView -Title "Oldest Counter Entries"
    }
    Write-Verbose "OldestButton_Click - $(Get-Date) - Exit"
  }

  $ConnectButton_Click = {
    $sessionID = $global:defaultviservers | where {$_.Name -eq $vSphereServer.Text} |
    Select -First 1 -ExpandProperty SessionId
    if($sessionId){
      Connect-VIServer -Server $vSphereServer.Text -Session $sessionId
    }
    else{
      Connect-VIServer -Server $vSphereServer.Text
    }
    $script:EntitiesSelectedUpToDate = $false
    $vSphereServer.Text = $global:DefaultVIServer.Name
    $vsphereinfo.text = $global:DefaultVIServer.ExtensionData.Content.About.FullName
    if($script:vServers -notcontains $vSphereServer.Text){
      $script:vServers += $vSphereServer.Text
    }
    & $FormInit
  }

  $Interval_Radio_Changed = {
    Write-Verbose "Interval_Radio_Changed - $(Get-Date) - Entry"
    if($this.Checked){
      $script:SelectedGroupUpToDate = $false
      $script:SelectedUpToDate = $false
      $script:LevelInfoUpToDate = $false
      Update-CountersList
    }
  }

  $GenerateCodeButton_Click = {
    Write-Verbose "GenerateCodeButton_Click - $(Get-Date) - Entry"

    $counters = @($CountersList.Items | Where {$_.Checked})
    $entities = @($EntitiesList.Items | where {$_.Checked})

    Write-Verbose "GenerateCodeButton_Click - Counters Checked - $($counters.Count)"
    Write-Verbose "GenerateCodeButton_Click - Entities Checked - $($entities.Count)"

    if($counters.Count -ne 0 -and $entities.Count -ne 0){
      $stats = """$([string]::Join('","',($counters | Select -ExpandProperty Text)))"""
      $names = """$([string]::Join('","',($entities | Select -ExpandProperty Text)))"""
      $code = @()
      $code += '#------------------------------------'
      $code += '# Code generated by the Stats Toolbox'
      $code += '#------------------------------------'
      $code += '$stat = #stats#'.Replace('#stats#',$stats)
      $code += ''
      $code += '# Update the Start and Finish values'
      $code += '$finish = Get-Date'
      $code += '$start = $finish.AddHours(-1)'
      $code += ''
      $code += '$entities = Get-Inventory -Name #names#'.Replace('#names#',$names)
      $code += ''
      $code += 'Get-Stat -Entity $entities -Stat $stat -Start $start -Finish $finish'
      $codeText = $code | Out-String
      [Windows.Forms.Clipboard]::SetText($codeText)
    }
    Write-Verbose "GenerateCodeButton_Click - $(Get-Date) - Exit"
  }

  $Group_Value_Changed = {
    Write-Verbose "Group_Value_Changed - $(Get-Date) - Entry"
    Write-Verbose "Group_Value_Changed - Script index - $($script:GroupSelectedIndex)"
    Write-Verbose "Group_Value_Changed - Form index - $($CounterGroup.SelectedIndex)"
    Write-Verbose "Group_Value_Changed - Script Value - $($script:GroupSelected)"
    Write-Verbose "Group_Value_Changed - Form Value - $($CounterGroup.SelectedItem)"

    if($script:GroupSelectedIndex -ne $CounterGroup.SelectedIndex){
      $script:SelectedUpToDate = $false
      Update-CountersList
      $script:GroupSelectedIndex = $CounterGroup.SelectedIndex
      $script:GroupSelected = $CounterGroup.SelectedItem
    }
  }

  $Google_Click = {
    $fixedKeywords = "VMware","vSphere","ESXi"
    $baseUrl = "http://www.google.com/search?q="
    $vmtn = "https://communities.vmware.com"
    $powercli = "https://communities.vmware.com/community/vmtn/automationtools/powercli"


    if($VMTNCheck.Checked){
      $site = $vmtn
    }
    if($PowerCLICheck.Checked){
      $site = $powercli
    }
    $items = $CountersList.SelectedItems | Select -ExpandProperty Text

    $url = $baseUrl + ([string]::Join('+',$fixedKeywords)) + "+" + ([string]::Join('+',$items))
    if($site){
      $url = $url + "+ site:" + $site
    }

    Start-Process $url
  }

  $ChangeLvlButton_Click = {
    Write-Verbose "ChangeLvlButton_Click - $(Get-Date) - Entry"
    Write-Verbose "ChangeLvlButton_Click - Selected Items - $($CountersList.SelectedItems.Count)"
    Write-Verbose "ChangeLvlButton_Click - Selected Items - $($CountersList.SelectedItems[0].Text)"

    if($CountersList.SelectedItems.Count -eq 0){}
    else{
      $map =@()
      foreach($selected in $CountersList.SelectedItems){
        $item = $script:SelectedCounters | where {$_.Counter -eq $selected.Text}
        Write-Verbose "ChangeLvlButton_Click - Found Item - $($item.Counter)"
        Write-Verbose "ChangeLvlButton_Click - Item Level - $($item.Level)"
        Write-Verbose "ChangeLvlButton_Click - Item DevLevel - $($item.DevLevel)"
        $LvlCounter.Text = $item.Counter
        $trackLevel.Value = $item.Level
        $trackdevicelevel.Value = $item.DevLevel
        $LvlForm.ShowDialog()| Out-Null
        Write-Verbose "ChangeLvlButton_Click - New Level - $($tracklevel.value)"
        Write-Verbose "ChangeLvlButton_Click - New DevLevel - $($trackdevicelevel.Value)"
        if($trackLevel.Value -ne $item.Level -or $trackdevicelevel.Value -ne $item.DevLevel){
          $newLevels = New-Object VMware.Vim.PerformanceManagerCounterLevelMapping
          $newLevels.CounterId = $item.Key
          $newLevels.AggregateLevel = $trackLevel.Value
          $newLevels.PerDeviceLevel = $trackdevicelevel.Value
          $map += $newLevels
        }
      }
      if($map){
        $script:perfMgr.UpdateCounterLevelMapping($map)
        $script:SelectedUpToDate = $False
        Update-Counters
        Update-CountersList
      }
    }

    Write-Verbose "ChangeLvlButton_Click - $(Get-Date) - Exit"
  }

  $EntitySearchButton_Click = {
    Update-EntitiesList
  }

  $FinishButton_Click = {
    $StatsToolboxForm.Close()
  }

  $ListViewColumnClick = {
    Sort-ListViewColumn $this $_.Column
  }

  $OnLoadForm_StateCorrection = {
    #Correct the initial state of the form to prevent the .Net maximized form issue
    $StatsToolboxForm.WindowState = $InitialFormWindowState
  }

#endregion Event Script Blocks

#region Generated Form Objects
  $StatsToolboxForm = New-Object System.Windows.Forms.Form
  $vSphereServerLabel = New-Object System.Windows.Forms.Label
  $vSphereServer = New-Object System.Windows.Forms.ComboBox
  $ConnectButton = New-Object System.Windows.Forms.Button
  $vsphereinfo = New-Object System.Windows.Forms.Label
  $IntervalGroup = New-Object System.Windows.Forms.GroupBox
  $RTRadio = New-Object System.Windows.Forms.RadioButton
  $HI1Radio = New-Object System.Windows.Forms.RadioButton
  $HI2Radio = New-Object System.Windows.Forms.RadioButton
  $HI3Radio = New-Object System.Windows.Forms.RadioButton
  $HI4Radio = New-Object System.Windows.Forms.RadioButton
  $StatLevelinfo = New-Object System.Windows.Forms.Label
  $groupLabel = New-Object System.Windows.Forms.Label
  $CounterGroup = New-Object System.Windows.Forms.ComboBox
  $countersLabel = New-Object System.Windows.Forms.Label
  $CountersInfo = New-Object System.Windows.Forms.Label
  $CountersList = New-Object System.Windows.Forms.ListView
  $CounterHdr1 = New-Object System.Windows.Forms.ColumnHeader
  $CounterHdr2 = New-Object System.Windows.Forms.ColumnHeader
  $CounterHdr3 = New-Object System.Windows.Forms.ColumnHeader
  $ChangeLvlButton = New-Object System.Windows.Forms.Button
  $GoogleButton = New-Object System.Windows.Forms.Button
  $VMTNCheck = New-Object System.Windows.Forms.CheckBox
  $PowerCLICheck = New-Object System.Windows.Forms.CheckBox
  $entitiesLabel = New-Object System.Windows.Forms.Label
  $EntitySearch = New-Object System.Windows.Forms.TextBox
  $EntitySearchButton = New-Object System.Windows.Forms.Button
  $EntitiesList = New-Object System.Windows.Forms.ListView
  $EntityHdr1 = New-Object System.Windows.Forms.ColumnHeader
  $EntityHdr2 = New-Object System.Windows.Forms.ColumnHeader
  $OldestButton = New-Object System.Windows.Forms.Button
  $GenerateCodeButton = New-Object System.Windows.Forms.Button
  $FinishButton = New-Object System.Windows.Forms.Button
  $InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
#endregion Generated Form Objects

#region Generated Form Code

  #region Form
  $StatsToolboxForm.Text = "Stats Toolbox v$statToolboxVersion"
  $StatsToolboxForm.Name = "StatsToolboxForm"
  $StatsToolboxForm.DataBindings.DefaultDataSourceUpdateMode = 0
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 497
  $System_Drawing_Size.Height = 574
  $StatsToolboxForm.ClientSize = $System_Drawing_Size
  $StatsToolboxForm.AcceptButton = $FinishButton
  $StatsToolboxForm.FormBorderStyle = 3
  $StatsToolboxForm.add_Load($FormInit)
  #endregion

  #region vSphere Server label
  $vSphereServerLabel.TabIndex = 1
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 90
  $System_Drawing_Size.Height = 24
  $vSphereServerLabel.Size = $System_Drawing_Size
  $vSphereServerLabel.Text = "vSphere Server"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 17
  $System_Drawing_Point.Y = 9
  $vSphereServerLabel.Location = $System_Drawing_Point
  $vSphereServerLabel.DataBindings.DefaultDataSourceUpdateMode = 0
  $vSphereServerLabel.Name = "vSphereServerLabel"

  $StatsToolboxForm.Controls.Add($vSphereServerLabel)
  #endregion

  #region vSphere Server
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 266
  $System_Drawing_Size.Height = 20
  $vSphereServer.Size = $System_Drawing_Size
  $vSphereServer.DataBindings.DefaultDataSourceUpdateMode = 0
  $vSphereServer.Name = "vSphereServer"
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 111
  $System_Drawing_Point.Y = 6
  $vSphereServer.Location = $System_Drawing_Point
  $vSphereServer.TabIndex = 0

  $StatsToolboxForm.Controls.Add($vSphereServer)
  #endregion

  #region Connect Button
  $ConnectButton.TabIndex = 2
  $ConnectButton.Name = "ConnectButton"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 92
  $System_Drawing_Size.Height = 19
  $ConnectButton.Size = $System_Drawing_Size
  $ConnectButton.UseVisualStyleBackColor = $True

  $ConnectButton.Text = "Connect"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 392
  $System_Drawing_Point.Y = 6
  $ConnectButton.Location = $System_Drawing_Point
  $ConnectButton.DataBindings.DefaultDataSourceUpdateMode = 0
  $ConnectButton.add_Click($ConnectButton_Click)

  $StatsToolboxForm.Controls.Add($ConnectButton)
  #endregion

  #region vSphere Server Info
  $vsphereinfo.TabIndex = 0
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 267
  $System_Drawing_Size.Height = 20
  $vsphereinfo.Size = $System_Drawing_Size
  $vsphereinfo.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",7.25,0,3,1)

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 111
  $System_Drawing_Point.Y = 30
  $vsphereinfo.Location = $System_Drawing_Point
  $vsphereinfo.DataBindings.DefaultDataSourceUpdateMode = 0
  $vsphereinfo.Name = "vsphereinfo"

  $StatsToolboxForm.Controls.Add($vsphereinfo)
  #endregion

  #region IntervalGroup
  $IntervalGroup.Name = "IntervalGroup"

  $IntervalGroup.Text = "Interval"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 329
  $System_Drawing_Size.Height = 49
  $IntervalGroup.Size = $System_Drawing_Size
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 17
  $System_Drawing_Point.Y = 61
  $IntervalGroup.Location = $System_Drawing_Point
  $IntervalGroup.TabStop = $False
  $IntervalGroup.TabIndex = 10
  $IntervalGroup.DataBindings.DefaultDataSourceUpdateMode = 0

  $StatsToolboxForm.Controls.Add($IntervalGroup)
  #endregion

  #region Realtime Radio Button
  $RTRadio.TabIndex = 8
  $RTRadio.Name = "RTRadio"
  $RTRadio.Checked = $true
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 74
  $System_Drawing_Size.Height = 18
  $RTRadio.Size = $System_Drawing_Size
  $RTRadio.UseVisualStyleBackColor = $True

  $RTRadio.Text = "Realtime"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 13
  $System_Drawing_Point.Y = 16
  $RTRadio.Location = $System_Drawing_Point
  $RTRadio.DataBindings.DefaultDataSourceUpdateMode = 0
  $RTRadio.TabStop = $True
  $RTRadio.add_CheckedChanged($Interval_Radio_Changed)

  $IntervalGroup.Controls.Add($RTRadio)
  #endregion

  #region Historical Interval 1 Radio Button
  $HI1Radio.TabIndex = 9
  $HI1Radio.Name = "HI1Radio"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 54
  $System_Drawing_Size.Height = 24
  $HI1Radio.Size = $System_Drawing_Size
  $HI1Radio.UseVisualStyleBackColor = $True

  $HI1Radio.Text = "HI1"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 94
  $System_Drawing_Point.Y = 13
  $HI1Radio.Location = $System_Drawing_Point
  $HI1Radio.DataBindings.DefaultDataSourceUpdateMode = 0
  $HI1Radio.TabStop = $True
  $HI1Radio.add_CheckedChanged($Interval_Radio_Changed)

  $IntervalGroup.Controls.Add($HI1Radio)
  #endregion

  #region Historical Interval 2 Radio Button
  $HI2Radio.TabIndex = 10
  $HI2Radio.Name = "HI2Radio"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 51
  $System_Drawing_Size.Height = 24
  $HI2Radio.Size = $System_Drawing_Size
  $HI2Radio.UseVisualStyleBackColor = $True

  $HI2Radio.Text = "HI2"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 154
  $System_Drawing_Point.Y = 13
  $HI2Radio.Location = $System_Drawing_Point
  $HI2Radio.DataBindings.DefaultDataSourceUpdateMode = 0
  $HI2Radio.TabStop = $True
  $HI2Radio.add_CheckedChanged($Interval_Radio_Changed)

  $IntervalGroup.Controls.Add($HI2Radio)
  #endregion

  #region Historical Interval 3 Radio Button
  $HI3Radio.TabIndex = 11
  $HI3Radio.Name = "HI3Radio"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 51
  $System_Drawing_Size.Height = 24
  $HI3Radio.Size = $System_Drawing_Size
  $HI3Radio.UseVisualStyleBackColor = $True

  $HI3Radio.Text = "HI3"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 211
  $System_Drawing_Point.Y = 13
  $HI3Radio.Location = $System_Drawing_Point
  $HI3Radio.DataBindings.DefaultDataSourceUpdateMode = 0
  $HI3Radio.TabStop = $True
  $HI3Radio.add_CheckedChanged($Interval_Radio_Changed)

  $IntervalGroup.Controls.Add($HI3Radio)
  #endregion

  #region Historical Interval 4 Radio Button
  $HI4Radio.TabIndex = 12
  $HI4Radio.Name = "HI4Radio"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 52
  $System_Drawing_Size.Height = 24
  $HI4Radio.Size = $System_Drawing_Size
  $HI4Radio.UseVisualStyleBackColor = $True

  $HI4Radio.Text = "HI4"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 268
  $System_Drawing_Point.Y = 13
  $HI4Radio.Location = $System_Drawing_Point
  $HI4Radio.DataBindings.DefaultDataSourceUpdateMode = 0
  $HI4Radio.TabStop = $True
  $HI4Radio.add_CheckedChanged($Interval_Radio_Changed)

  $IntervalGroup.Controls.Add($HI4Radio)
  #endregion

  #region Interval Level Info
  $statlevelinfo.TabIndex = 0
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 100
  $System_Drawing_Size.Height = 23
  $statlevelinfo.Size = $System_Drawing_Size
  $statlevelinfo.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",7.25,0,3,1)

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 352
  $System_Drawing_Point.Y = 75
  $statlevelinfo.Location = $System_Drawing_Point
  $statlevelinfo.DataBindings.DefaultDataSourceUpdateMode = 0
  $statlevelinfo.Name = "statlevelinfo"

  $StatsToolboxForm.Controls.Add($statlevelinfo)
  #endregion

  #region Group Label
  $groupLabel.TabIndex = 12
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 71
  $System_Drawing_Size.Height = 17
  $groupLabel.Size = $System_Drawing_Size
  $groupLabel.Text = "Group"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 17
  $System_Drawing_Point.Y = 120
  $groupLabel.Location = $System_Drawing_Point
  $groupLabel.DataBindings.DefaultDataSourceUpdateMode = 0
  $groupLabel.Name = "GroupLabel"

  $StatsToolboxForm.Controls.Add($groupLabel)#endregion

  #region Group Combobox
  $CounterGroup.DropDownStyle = 2
  $CounterGroup.FormattingEnabled = $True
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 139
  $System_Drawing_Size.Height = 21
  $CounterGroup.Size = $System_Drawing_Size
  $CounterGroup.DataBindings.DefaultDataSourceUpdateMode = 0
  $CounterGroup.Name = "CounterGroup"
  $CounterGroup.Items.Add("<All>")|Out-Null
  $CounterGroup.Text = "<All>"
  $CounterGroup.SelectedIndex = 0
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 94
  $System_Drawing_Point.Y = 120
  $CounterGroup.Location = $System_Drawing_Point
  $CounterGroup.TabIndex = 11
  $CounterGroup.add_SelectedIndexChanged($Group_Value_Changed)

  $StatsToolboxForm.Controls.Add($CounterGroup)
  #endregion

  #region Counters Label
  $countersLabel.TabIndex = 4
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 77
  $System_Drawing_Size.Height = 15
  $countersLabel.Size = $System_Drawing_Size
  $countersLabel.Text = "Counters"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 17
  $System_Drawing_Point.Y = 158
  $countersLabel.Location = $System_Drawing_Point
  $countersLabel.DataBindings.DefaultDataSourceUpdateMode = 0
  $countersLabel.Name = "CountersLabel"

  $StatsToolboxForm.Controls.Add($countersLabel)
  #endregion

  #region Counters Info
  $CountersInfo.TabIndex = 0
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 267
  $System_Drawing_Size.Height = 20
  $CountersInfo.Size = $System_Drawing_Size
  $CountersInfo.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",7.25,0,3,1)

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 100
  $System_Drawing_Point.Y = 158
  $CountersInfo.Location = $System_Drawing_Point
  $CountersInfo.DataBindings.DefaultDataSourceUpdateMode = 0
  $CountersInfo.Name = "countersinfo"

  $StatsToolboxForm.Controls.Add($CountersInfo)
  #endregion

  #region Counters ListView
  $CountersList.UseCompatibleStateImageBehavior = $False
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 354
  $System_Drawing_Size.Height = 173
  $CountersList.Size = $System_Drawing_Size
  $CountersList.DataBindings.DefaultDataSourceUpdateMode = 0
  $CountersList.Name = "CountersList"
  $CountersList.View = 1
  $CountersList.TabIndex = 0
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 17
  $System_Drawing_Point.Y = 178
  $CountersList.Location = $System_Drawing_Point
  $CountersList.Columns.Add($CounterHdr1)|Out-Null
  $CountersList.Columns.Add($CounterHdr2)|Out-Null
  $CountersList.Columns.Add($CounterHdr3)|Out-Null

  $CounterHdr1.Width = 233
  $CounterHdr1.Text = "Name"
  $CounterHdr2.Width = 50
  $CounterHdr2.Text = "Lvl"
  $CounterHdr3.Width = 50
  $CounterHdr3.Text = "DevLvl"
  $CountersList.Sorting = 1
  $CountersList.ShowItemToolTips = $true
  $CountersList.TabStop = $False
  $CountersList.CheckBoxes = $true
  $CountersList.add_ColumnClick($ListViewColumnClick)

  $StatsToolboxForm.Controls.Add($CountersList)
  #endregion

  #region Change Level
  $ChangeLvlButton.TabIndex = 14
  $ChangeLvlButton.Name = "ChangeLvlButton"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 92
  $System_Drawing_Size.Height = 21
  $ChangeLvlButton.Size = $System_Drawing_Size
  $ChangeLvlButton.UseVisualStyleBackColor = $True

  $ChangeLvlButton.Text = "Change Level"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 392
  $System_Drawing_Point.Y = 178
  $ChangeLvlButton.Location = $System_Drawing_Point
  $ChangeLvlButton.DataBindings.DefaultDataSourceUpdateMode = 0
  $ChangeLvlButton.add_Click($ChangeLvlButton_Click)

  $StatsToolboxForm.Controls.Add($ChangeLvlButton)
  #endregion

  #region Google It
  $GoogleButton.TabIndex = 16
  $GoogleButton.Name = "GoogleButton"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 92
  $System_Drawing_Size.Height = 23
  $GoogleButton.Size = $System_Drawing_Size
  $GoogleButton.UseVisualStyleBackColor = $True

  $GoogleButton.Text = "Google it"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 392
  $System_Drawing_Point.Y = 214
  $GoogleButton.Location = $System_Drawing_Point
  $GoogleButton.DataBindings.DefaultDataSourceUpdateMode = 0
  $GoogleButton.add_Click($Google_Click)

  $StatsToolboxForm.Controls.Add($GoogleButton)
  #endregion

  #region VMTN Check
  $VMTNCheck.UseVisualStyleBackColor = $True
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 83
  $System_Drawing_Size.Height = 24
  $VMTNCheck.Size = $System_Drawing_Size
  $VMTNCheck.TabIndex = 17
  $VMTNCheck.Text = "VMTN"
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 401
  $System_Drawing_Point.Y = 243
  $VMTNCheck.Location = $System_Drawing_Point
  $VMTNCheck.DataBindings.DefaultDataSourceUpdateMode = 0
  $VMTNCheck.Name = "VMTNCheck"

  $VMTNCheck.add_CheckedChanged($handler_checkBox1_CheckedChanged)

  $StatsToolboxForm.Controls.Add($VMTNCheck)
  #endregion

  #region PowerCLI check
  $PowerCLICheck.UseVisualStyleBackColor = $True
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 83
  $System_Drawing_Size.Height = 24
  $PowerCLICheck.Size = $System_Drawing_Size
  $PowerCLICheck.TabIndex = 18
  $PowerCLICheck.Text = "PowerCLI"
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 401
  $System_Drawing_Point.Y = 273
  $PowerCLICheck.Location = $System_Drawing_Point
  $PowerCLICheck.DataBindings.DefaultDataSourceUpdateMode = 0
  $PowerCLICheck.Name = "PowerCLICheck"


  $StatsToolboxForm.Controls.Add($PowerCLICheck)
  #endregion

  #region Entity Label
  $entitiesLabel.TabIndex = 6
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 47
  $System_Drawing_Size.Height = 16
  $entitiesLabel.Size = $System_Drawing_Size
  $entitiesLabel.Text = "Entities"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 17
  $System_Drawing_Point.Y = 380
  $entitiesLabel.Location = $System_Drawing_Point
  $entitiesLabel.DataBindings.DefaultDataSourceUpdateMode = 0
  $entitiesLabel.Name = "EntitiesLabel"

  $StatsToolboxForm.Controls.Add($entitiesLabel)
  #endregion

  #region Entity Search Input
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 218
  $System_Drawing_Size.Height = 20
  $EntitySearch.Size = $System_Drawing_Size
  $EntitySearch.DataBindings.DefaultDataSourceUpdateMode = 0
  $EntitySearch.Name = "EntitySearch"
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 68
  $System_Drawing_Point.Y = 378
  $EntitySearch.Location = $System_Drawing_Point
  $EntitySearch.TabIndex = 20

  $StatsToolboxForm.Controls.Add($EntitySearch)
  #endregion

  #region Entity Search Button
  $EntitySearchButton.TabIndex = 21
  $EntitySearchButton.Name = "EntitySearchButton"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 63
  $System_Drawing_Size.Height = 22
  $EntitySearchButton.Size = $System_Drawing_Size
  $EntitySearchButton.UseVisualStyleBackColor = $True

  $EntitySearchButton.Text = "Search"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 308
  $System_Drawing_Point.Y = 377
  $EntitySearchButton.Location = $System_Drawing_Point
  $EntitySearchButton.DataBindings.DefaultDataSourceUpdateMode = 0
  $EntitySearchButton.add_Click($EntitySearchButton_Click)

  $StatsToolboxForm.Controls.Add($EntitySearchButton)
  #endregion

  #region Entities ListView
  $EntitiesList.UseCompatibleStateImageBehavior = $False
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 354
  $System_Drawing_Size.Height = 121
  $EntitiesList.Size = $System_Drawing_Size
  $EntitiesList.DataBindings.DefaultDataSourceUpdateMode = 0
  $EntitiesList.Name = "CountersList"
  $EntitiesList.View = 1
  $EntitiesList.TabIndex = 0
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 17
  $System_Drawing_Point.Y = 411
  $EntitiesList.Location = $System_Drawing_Point

  $EntitiesList.Columns.Add($EntityHdr1)|Out-Null
  $EntitiesList.Columns.Add($EntityHdr2)|Out-Null

  $EntityHdr1.Width = 170
  $EntityHdr1.Text = "Name"
  $EntityHdr2.Width = 90
  $EntityHdr2.Text = "Type"

  $EntitiesList.TabStop = $False
  $EntitiesList.CheckBoxes = $true

  $EntitiesList.add_ColumnClick($ListViewColumnClick)

  $StatsToolboxForm.Controls.Add($EntitiesList)
  #endregion

  #region Oldest Button
  $OldestButton.TabIndex = 7
  $OldestButton.Name = "OldestButton"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 92
  $System_Drawing_Size.Height = 23
  $OldestButton.Size = $System_Drawing_Size
  $OldestButton.UseVisualStyleBackColor = $True

  $OldestButton.Text = "Oldest"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 392
  $System_Drawing_Point.Y = 411
  $OldestButton.Location = $System_Drawing_Point
  $OldestButton.DataBindings.DefaultDataSourceUpdateMode = 0
  $OldestButton.add_Click($OldestButton_Click)

  $StatsToolboxForm.Controls.Add($OldestButton)
  #endregion

  #region Generate Code Button
  $GenerateCodeButton.TabIndex = 15
  $GenerateCodeButton.Name = "GenerateCodeButton"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 92
  $System_Drawing_Size.Height = 23
  $GenerateCodeButton.Size = $System_Drawing_Size
  $GenerateCodeButton.UseVisualStyleBackColor = $True

  $GenerateCodeButton.Text = "Generate Code"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 392
  $System_Drawing_Point.Y = 440
  $GenerateCodeButton.Location = $System_Drawing_Point
  $GenerateCodeButton.DataBindings.DefaultDataSourceUpdateMode = 0
  $GenerateCodeButton.add_Click($GenerateCodeButton_Click)

  $StatsToolboxForm.Controls.Add($GenerateCodeButton)
  #endregion

  #region Finish Button
  $FinishButton.TabIndex = 13
  $FinishButton.Name = "FinishButton"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 80
  $System_Drawing_Size.Height = 22
  $FinishButton.Size = $System_Drawing_Size
  $FinishButton.UseVisualStyleBackColor = $True

  $FinishButton.Text = "Finish"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 404
  $System_Drawing_Point.Y = 546
  $FinishButton.Location = $System_Drawing_Point
  $FinishButton.DataBindings.DefaultDataSourceUpdateMode = 0
  $FinishButton.add_Click($FinishButton_Click)

  $StatsToolboxForm.Controls.Add($FinishButton)#endregion

  #region Level Form

  #region Generated Form Objects
  $LvlForm = New-Object System.Windows.Forms.Form
  $LvlCounterLabel = New-Object System.Windows.Forms.Label
  $LvlCounter = New-Object System.Windows.Forms.TextBox
  $LvlLevelLabel = New-Object System.Windows.Forms.Label
  $TrackLevel = New-Object System.Windows.Forms.TrackBar
  $LvlDevLabel = New-Object System.Windows.Forms.Label
  $trackDeviceLevel = New-Object System.Windows.Forms.TrackBar
  $LvlOK = New-Object System.Windows.Forms.Button
  $LvlCancel = New-Object System.Windows.Forms.Button
  $InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
  #endregion Generated Form Objects

  #region Generated Event Script Blocks
  #----------------------------------------------
  #Generated Event Script Blocks
  #----------------------------------------------
  #Provide Custom Code for events specified in PrimalForms.
  $LvlCancel_OnClick = {
    $LvlForm.Close()
  }

  $LvlOK_OnClick = {
    $LvlForm.Close()
  }

  $Lvl_OnLoadForm_StateCorrection = {#Correct the initial state of the form to prevent the .Net maximized form issue
  $LvlForm.WindowState = $InitialFormWindowState
  }
  #endregion

  #region Generated Form Code
  #region Level Form
  $LvlForm.Text = "Stats Toolbox - Change Levels"
  $LvlForm.Name = "LevelChange"
  $LvlForm.DataBindings.DefaultDataSourceUpdateMode = 0
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 292
  $System_Drawing_Size.Height = 199
  $LvlForm.ClientSize = $System_Drawing_Size
  #endregion

  #region Lvl Counter Label
  $LvlCounterLabel.TabIndex = 0
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 55
  $System_Drawing_Size.Height = 18
  $LvlCounterLabel.Size = $System_Drawing_Size
  $LvlCounterLabel.Text = "Counter"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 15
  $System_Drawing_Point.Y = 18
  $LvlCounterLabel.Location = $System_Drawing_Point
  $LvlCounterLabel.DataBindings.DefaultDataSourceUpdateMode = 0
  $LvlCounterLabel.Name = "label1"

  $LvlForm.Controls.Add($LvlCounterLabel)
  #endregion

  #region Lvl Counter
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 193
  $System_Drawing_Size.Height = 20
  $LvlCounter.Size = $System_Drawing_Size
  $LvlCounter.DataBindings.DefaultDataSourceUpdateMode = 0
  $LvlCounter.Name = "LvlCounter"
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 76
  $System_Drawing_Point.Y = 15
  $LvlCounter.Location = $System_Drawing_Point
  $LvlCounter.TabIndex = 1

  $LvlForm.Controls.Add($LvlCounter)
  #endregion

  #region Lvl Level Label
  $LvlLevelLabel.TabIndex = 2
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 40
  $System_Drawing_Size.Height = 17
  $LvlLevelLabel.Size = $System_Drawing_Size
  $LvlLevelLabel.Text = "Level"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 15
  $System_Drawing_Point.Y = 58
  $LvlLevelLabel.Location = $System_Drawing_Point
  $LvlLevelLabel.DataBindings.DefaultDataSourceUpdateMode = 0
  $LvlLevelLabel.Name = "Level"

  $LvlForm.Controls.Add($LvlLevelLabel)
  #endregion

  #region Level Track
  $TrackLevel.DataBindings.DefaultDataSourceUpdateMode = 0
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 161
  $System_Drawing_Size.Height = 45
  $TrackLevel.Size = $System_Drawing_Size
  $TrackLevel.TabIndex = 6
  $TrackLevel.LargeChange = 1
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 76
  $System_Drawing_Point.Y = 58
  $TrackLevel.Location = $System_Drawing_Point
  $TrackLevel.Minimum = 1
  $TrackLevel.Value = 2
  $TrackLevel.Name = "TrackLevel"
  $TrackLevel.Maximum = 4

  $LvlForm.Controls.Add($TrackLevel)
  #endregion

  #region Lvl DevLevel Label
  $LvlDevLabel.TabIndex = 3
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 55
  $System_Drawing_Size.Height = 18
  $LvlDevLabel.Size = $System_Drawing_Size
  $LvlDevLabel.Text = "DevLevel"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 15
  $System_Drawing_Point.Y = 104
  $LvlDevLabel.Location = $System_Drawing_Point
  $LvlDevLabel.DataBindings.DefaultDataSourceUpdateMode = 0
  $LvlDevLabel.Name = "DevLevel"

  $LvlForm.Controls.Add($LvlDevLabel)
  #endregion

  #region Device Level Track
  $trackDeviceLevel.DataBindings.DefaultDataSourceUpdateMode = 0
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 161
  $System_Drawing_Size.Height = 45
  $trackDeviceLevel.Size = $System_Drawing_Size
  $trackDeviceLevel.TabIndex = 7
  $trackDeviceLevel.LargeChange = 1
  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 76
  $System_Drawing_Point.Y = 104
  $trackDeviceLevel.Location = $System_Drawing_Point
  $trackDeviceLevel.Minimum = 1
  $trackDeviceLevel.Value = 3
  $trackDeviceLevel.Name = "trackDeviceLevel"
  $trackDeviceLevel.Maximum = 4

  $LvlForm.Controls.Add($trackDeviceLevel)
  #endregion

  #region Lvl OK button
  $LvlOK.TabIndex = 5
  $LvlOK.Name = "LvlOK"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 73
  $System_Drawing_Size.Height = 21
  $LvlOK.Size = $System_Drawing_Size
  $LvlOK.UseVisualStyleBackColor = $True

  $LvlOK.Text = "OK"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 186
  $System_Drawing_Point.Y = 167
  $LvlOK.Location = $System_Drawing_Point
  $LvlOK.DataBindings.DefaultDataSourceUpdateMode = 0
  $LvlOK.add_Click($LvlOK_OnClick)

  $LvlForm.Controls.Add($LvlOK)
  #endregion

  #region Lvl Cancel Button
  $LvlCancel.TabIndex = 4
  $LvlCancel.Name = "LvlCancel"
  $System_Drawing_Size = New-Object System.Drawing.Size
  $System_Drawing_Size.Width = 73
  $System_Drawing_Size.Height = 21
  $LvlCancel.Size = $System_Drawing_Size
  $LvlCancel.UseVisualStyleBackColor = $True

  $LvlCancel.Text = "Cancel"

  $System_Drawing_Point = New-Object System.Drawing.Point
  $System_Drawing_Point.X = 50
  $System_Drawing_Point.Y = 166
  $LvlCancel.Location = $System_Drawing_Point
  $LvlCancel.DataBindings.DefaultDataSourceUpdateMode = 0
  $LvlCancel.add_Click($LvlCancel_OnClick)

  $LvlForm.Controls.Add($LvlCancel)
  #endregion

  #endregion

  #endregion Generated Form Code

  #region RunForm Dialog
  #Save the initial state of the form
  $InitialFormWindowState = $StatsToolboxForm.WindowState
  $InitialFormWindowState = $LvlForm.WindowState
  #Init the OnLoad event to correct the initial state of the form
  $StatsToolboxForm.add_Load($OnLoadForm_StateCorrection)
  $LvlForm.add_Load($Lvl_OnLoadForm_StateCorrection)
  #Show the Form
  $StatsToolboxForm.ShowDialog()| Out-Null
  #endregion
#endregion Generated Form Code
}

#region Main

$oldVerbose = $VerbosePreference
$oldWarning = $WarningPreference

$VerbosePreference = "SilentlyContinue"
#$VerbosePreference = "Continue"
$WarningPreference = "SilentlyContinue"

if(!$PSVersionTable -or $PSVersionTable.PSVersion.Major -lt 3){
  Write-Error "The script requires at least PowerShell v3."
  return
}
Try {
  Get-PSSnapin -Name VMware.VimAutomation.Core -ErrorAction Stop
}
Catch {
  Add-PSSnapin -Name VMware.VimAutomation.Core | Out-Null
}

$statToolboxVersion = "1.1a"
$statToolboxIni = ".\StatsToolbox.ini"



if(Test-Path -Path $statToolboxIni){
  $script:vServers = @(Get-Content -Path $statToolboxIni)
}

# Show form

GenerateForm

$script:vServers | Set-Content -Path $statToolboxIni -Force -Confirm:$false

$VerbosePreference = $oldVerbose
$WarningPreference = $oldWarning
#endregion
