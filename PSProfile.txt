#########################
# Window, Path and Help #
#########################
$Date = ((Get-Date -Format dMMMyy).ToString()) + "-" + ((get-date -Format hhmm).ToString())
# Set the Path
Set-Location -Path C:\projects
# Refresh Help
Start-Job -Name "UpdateHelp" -ScriptBlock { Update-Help -Force } | Out-Null
Write-Host "Updating Help in background (Get-Help to check)" -ForegroundColor 'DarkGray'
Start-Job -Name "UpdatePowerCLI" -ScriptBlock { Update-Module VMware.powerCLI -Force } | Out-Null
Write-Host "Updating VMware PowerCLI in background" -ForegroundColor 'DarkGray'
# Show PS Version and date/time
Set-ExecutionPolicy Unrestricted process -Force
Write-Host "PowerShell Version: $($psversiontable.psversion) - ExecutionPolicy: $(Get-ExecutionPolicy)" -for yellow


# Transcript
Start-Transcript -Path ~\Documents\WindowsPowerShell\Transcripts\$Date.log


#Alias
New-Alias -Name npp -Value "C:\Program Files\Notepad++\notepad++.exe"


#load functions
function Test-Administrator {
    $user = [Security.Principal.WindowsIdentity]::GetCurrent()
    (New-Object Security.Principal.WindowsPrincipal $user).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}

function Start-PsElevatedSession {
    # Open a new elevated powershell window
    if (!(Test-Administrator)) {
        if ($host.Name -match 'ISE') {
            Start-Process PowerShell_ISE.exe -Verb runas
        }
        else {
            Start-Process powershell -Verb runas -ArgumentList $('-noexit ' + ($args | Out-String))
        }
    }
    else {
        Write-Warning 'Session is already elevated'
    }
}

$MajorVersion = $PSVersionTable.PSVersion.Major
$MinorVersion = $PSVersionTable.PSVersion.Minor

$host.UI.RawUI.WindowTitle = "PowerShell v$MajorVersion.$MinorVersion $ShellBits | $env:USERNAME@$env:USERDNSDOMAIN | $env:COMPUTERNAME | $env:LOGONSERVER"
